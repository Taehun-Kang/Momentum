import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import Anthropic from '@anthropic-ai/sdk';
import dotenv from 'dotenv';

// ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
dotenv.config();

/**
 * üåä Momentum YouTube Curator MCP ÏÑúÎ≤Ñ
 * Wave TeamÏùò AI ÌÅêÎ†àÏù¥ÏÖò ÏãúÏä§ÌÖúÏùÑ ÏúÑÌïú MCP Íµ¨ÌòÑ
 * 
 * Í∏∞Îä•:
 * - ÏûêÏó∞Ïñ¥ ‚Üí ÌÇ§ÏõåÎìú Ï∂îÏ∂ú
 * - YouTube API ÏßÄÎä•Ìòï Ìò∏Ï∂ú
 * - ÏÇ¨Ïö©Ïûê ÎßûÏ∂§Ìòï Ï∂îÏ≤ú
 * - Ïã§ÏãúÍ∞Ñ Ìä∏Î†åÎìú Î∂ÑÏÑù
 */
class YouTubeCuratorMCP {
  constructor() {
    this.server = new Server(
      {
        name: 'momentum-youtube-curator',
        version: '1.0.0',
        description: 'AI-powered YouTube Shorts curation system by Wave Team'
      },
      {
        capabilities: {
          tools: {},
          resources: {},
          prompts: {}
        }
      }
    );

    // Claude API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî (API ÌÇ§Í∞Ä ÏûàÏùÑ ÎïåÎßå)
    if (process.env.CLAUDE_API_KEY) {
      this.claude = new Anthropic({
        apiKey: process.env.CLAUDE_API_KEY
      });
    }

    // Î∞±ÏóîÎìú API Î≤†Ïù¥Ïä§ URL
    this.backendUrl = process.env.BACKEND_URL || 'http://localhost:3002';

    this.setupTools();
    this.setupResources();
    this.setupPrompts();
  }

  /**
   * üõ†Ô∏è MCP ÎèÑÍµ¨Îì§ ÏÑ§Ï†ï (docs/basic/3.MCP Íµ¨ÌòÑ.md Í∏∞Î∞ò)
   */
  setupTools() {
    // ÎèÑÍµ¨ Î™©Î°ù Ìï∏Îì§Îü¨
    this.server.setRequestHandler('tools/list', async () => {
      return {
        tools: [
          {
            name: 'extract_keywords',
            description: 'ÏÇ¨Ïö©ÏûêÏùò ÏûêÏó∞Ïñ¥ ÏûÖÎ†•ÏóêÏÑú YouTube Í≤ÄÏÉâÏö© ÌÇ§ÏõåÎìúÎ•º Ï∂îÏ∂úÌï©ÎãàÎã§',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: 'ÏÇ¨Ïö©ÏûêÏùò ÏûêÏó∞Ïñ¥ ÏûÖÎ†• (Ïòà: "Ìá¥Í∑ºÌïòÍ≥† ÎÑàÎ¨¥ ÏßÄÏ≥ê", "Î≠îÍ∞Ä ÏõÉÍ∏¥ Í±∞")'
                },
                context: {
                  type: 'object',
                  properties: {
                    timeOfDay: { type: 'string', description: 'ÌòÑÏû¨ ÏãúÍ∞ÑÎåÄ' },
                    previousKeywords: { 
                      type: 'array', 
                      items: { type: 'string' },
                      description: 'Ïù¥Ï†Ñ Í≤ÄÏÉâ ÌÇ§ÏõåÎìúÎì§' 
                    },
                    userMood: { type: 'string', description: 'ÏÇ¨Ïö©Ïûê Í∞êÏ†ï ÏÉÅÌÉú' }
                  }
                }
              },
              required: ['message']
            }
          },

          {
            name: 'search_youtube_shorts',
            description: 'YouTube ShortsÎ•º Í≤ÄÏÉâÌïòÍ≥† Ïª®ÌÖçÏä§Ìä∏Ïóê ÎßûÍ≤å ÌïÑÌÑ∞ÎßÅÌï©ÎãàÎã§',
            inputSchema: {
              type: 'object',
              properties: {
                keywords: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Í≤ÄÏÉâÌï† ÌÇ§ÏõåÎìú Î™©Î°ù'
                },
                maxResults: {
                  type: 'number',
                  default: 10,
                  description: 'ÏµúÎåÄ Í≤∞Í≥º Ïàò'
                },
                filters: {
                  type: 'object',
                  properties: {
                    minViews: { type: 'number', default: 100000 },
                    maxDuration: { type: 'number', default: 60 },
                    language: { type: 'string', default: 'ko' }
                  }
                }
              },
              required: ['keywords']
            }
          },

          {
            name: 'analyze_trends',
            description: 'ÌòÑÏû¨ Ìä∏Î†åÎìúÎ•º Î∂ÑÏÑùÌïòÍ≥† Í¥ÄÎ†® ÌÇ§ÏõåÎìúÎ•º Ï†úÍ≥µÌï©ÎãàÎã§',
            inputSchema: {
              type: 'object',
              properties: {
                category: {
                  type: 'string',
                  enum: ['comedy', 'music', 'gaming', 'education', 'lifestyle', 'food', 'sports', 'tech'],
                  description: 'Î∂ÑÏÑùÌï† Ïπ¥ÌÖåÍ≥†Î¶¨'
                },
                timeRange: {
                  type: 'string',
                  enum: ['realtime', 'today', 'week'],
                  default: 'realtime'
                }
              }
            }
          },

          {
            name: 'generate_response',
            description: 'ÏûêÏó∞Ïä§Îü¨Ïö¥ ÎåÄÌôîÌòï ÏùëÎãµÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§',
            inputSchema: {
              type: 'object',
              properties: {
                keywords: { 
                  type: 'array', 
                  items: { type: 'string' },
                  description: 'Ï∂îÏ∂úÎêú ÌÇ§ÏõåÎìúÎì§'
                },
                videoCount: { 
                  type: 'number',
                  description: 'Ï∞æÏùÄ ÏòÅÏÉÅ Ïàò'
                },
                context: { 
                  type: 'object',
                  description: 'ÎåÄÌôî Ïª®ÌÖçÏä§Ìä∏'
                }
              },
              required: ['keywords']
            }
          }
        ]
      };
    });

    // ÎèÑÍµ¨ Ïã§Ìñâ Ìï∏Îì§Îü¨
    this.server.setRequestHandler('tools/call', async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'extract_keywords':
            return await this.extractKeywords(args);
            
          case 'search_youtube_shorts':
            return await this.searchYouTubeShorts(args);
            
          case 'analyze_trends':
            return await this.analyzeTrends(args);
            
          case 'generate_response':
            return await this.generateResponse(args);
            
          default:
            throw new Error(`Unknown tool: ${name}`);
        }
      } catch (error) {
        return {
          content: [{
            type: 'text',
            text: JSON.stringify({
              error: error.message,
              tool: name,
              timestamp: new Date().toISOString()
            })
          }],
          isError: true
        };
      }
    });
  }

  /**
   * üîç ÏûêÏó∞Ïñ¥ÏóêÏÑú ÌÇ§ÏõåÎìú Ï∂îÏ∂ú (docs Í∏∞Î∞ò Íµ¨ÌòÑ)
   */
  async extractKeywords({ message, context = {} }) {
    try {
      // 1. Îπ†Î•∏ Ìå®ÌÑ¥ Îß§Ïπ≠ ÏãúÎèÑ
      const quickKeywords = this.quickExtraction(message);
      if (quickKeywords.length > 0) {
        return {
          content: [{
            type: 'text',
            text: JSON.stringify({
              keywords: quickKeywords,
              confidence: 0.8,
              method: 'pattern_matching',
              context: this.getTimeContext()
            })
          }]
        };
      }

      // 2. ClaudeÎ•º ÏÇ¨Ïö©Ìïú Í≥†Í∏â Ï∂îÏ∂ú (API ÌÇ§Í∞Ä ÏûàÏùÑ ÎïåÎßå)
      if (this.claude) {
        const prompt = `
ÏÇ¨Ïö©Ïûê ÏûÖÎ†•: "${message}"

Îã§ÏùåÏùÄ YouTube Shorts Í≤ÄÏÉâÏùÑ ÏúÑÌïú ÌÇ§ÏõåÎìú Ï∂îÏ∂ú ÏûëÏóÖÏûÖÎãàÎã§.

ÏÇ¨Ïö©ÏûêÏùò Í∞êÏ†ï, ÏÉÅÌô©, ÏùòÎèÑÎ•º Î∂ÑÏÑùÌïòÏó¨ Ï†ÅÏ†àÌïú ÌïúÍµ≠Ïñ¥ Í≤ÄÏÉâ ÌÇ§ÏõåÎìú 3-5Í∞úÎ•º Ï∂îÏ∂úÌï¥Ï£ºÏÑ∏Ïöî.

Í∑úÏπô:
1. ÌïúÍµ≠Ïñ¥ ÌÇ§ÏõåÎìú Ïö∞ÏÑ†
2. YouTubeÏóêÏÑú Ïã§Ï†ú Í≤ÄÏÉâ Í∞ÄÎä•Ìïú ÌÇ§ÏõåÎìú
3. ShortsÏóê Ï†ÅÌï©Ìïú ÌÇ§ÏõåÎìú (ÏßßÍ≥† ÏûÑÌå©Ìä∏ ÏûàÎäî)
4. Í∞êÏ†ïÍ≥º ÏÉÅÌô©ÏùÑ Í≥†Î†§

JSON ÌòïÏãùÏúºÎ°ú ÏùëÎãµ:
{
  "keywords": ["ÌÇ§ÏõåÎìú1", "ÌÇ§ÏõåÎìú2", "ÌÇ§ÏõåÎìú3"],
  "emotion": "Í∞êÏ†ïÎ∂ÑÏÑùÍ≤∞Í≥º",
  "intent": "ÏÇ¨Ïö©ÏûêÏùòÎèÑ",
  "confidence": 0.95
}
`;

        const response = await this.claude.messages.create({
          model: 'claude-3-sonnet-20240229',
          max_tokens: 500,
          messages: [{ role: 'user', content: prompt }]
        });

        const result = JSON.parse(response.content[0].text);

        return {
          content: [{
            type: 'text',
            text: JSON.stringify({
              keywords: result.keywords,
              emotion: result.emotion,
              intent: result.intent,
              confidence: result.confidence,
              method: 'claude_analysis',
              context: this.getTimeContext()
            })
          }]
        };
      }

      // 3. Ìè¥Î∞±: Í∏∞Î≥∏ ÌÇ§ÏõåÎìú Ï†úÍ≥µ
      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            keywords: ['Ïù∏Í∏∞ÏòÅÏÉÅ', 'Ï∂îÏ≤úÏòÅÏÉÅ', 'Ïû¨ÎØ∏ÏûàÎäîÏòÅÏÉÅ'],
            confidence: 0.3,
            method: 'fallback',
            note: 'Claude API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå'
          })
        }]
      };

    } catch (error) {
      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            keywords: ['Ïù∏Í∏∞ÏòÅÏÉÅ', 'Ï∂îÏ≤úÏòÅÏÉÅ', 'Ïû¨ÎØ∏ÏûàÎäîÏòÅÏÉÅ'],
            confidence: 0.3,
            method: 'fallback',
            error: error.message
          })
        }]
      };
    }
  }

  /**
   * üé¨ YouTube Shorts Í≤ÄÏÉâ (Î∞±ÏóîÎìú API ÌôúÏö©)
   */
  async searchYouTubeShorts({ keywords, maxResults = 10, filters = {} }) {
    try {
      const searchPromises = keywords.map(async (keyword) => {
        const response = await fetch(
          `${this.backendUrl}/api/v1/videos/search?q=${encodeURIComponent(keyword)}&maxResults=${maxResults}`
        );
        
        if (!response.ok) {
          throw new Error(`API Error: ${response.status}`);
        }
        
        return await response.json();
      });

      const results = await Promise.all(searchPromises);
      const allVideos = results.flatMap(result => result.data?.videos || []);

      // Ï§ëÎ≥µ Ï†úÍ±∞ Î∞è ÌïÑÌÑ∞ÎßÅ
      const uniqueVideos = this.deduplicateVideos(allVideos);
      const filteredVideos = this.applyFilters(uniqueVideos, filters);

      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            videos: filteredVideos.slice(0, maxResults),
            totalFound: filteredVideos.length,
            keywords: keywords,
            timestamp: new Date().toISOString()
          })
        }]
      };

    } catch (error) {
      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            error: error.message,
            videos: [],
            keywords: keywords
          })
        }],
        isError: true
      };
    }
  }

  /**
   * üìà Ìä∏Î†åÎìú Î∂ÑÏÑù (Î∞±ÏóîÎìú API ÌôúÏö©)
   */
  async analyzeTrends({ category, timeRange = 'realtime' }) {
    try {
      const endpoint = category 
        ? `/api/v1/videos/categories/${category}`
        : '/api/v1/videos/trending';

      const response = await fetch(`${this.backendUrl}${endpoint}`);
      
      if (!response.ok) {
        throw new Error(`Trends API Error: ${response.status}`);
      }
      
      const data = await response.json();

      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            trends: data.data,
            category: category || 'general',
            timeRange: timeRange,
            analysis: this.extractTrendKeywords(data.data),
            timestamp: new Date().toISOString()
          })
        }]
      };

    } catch (error) {
      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            error: error.message,
            trends: [],
            category: category || 'general'
          })
        }],
        isError: true
      };
    }
  }

  /**
   * üí¨ ÎåÄÌôîÌòï ÏùëÎãµ ÏÉùÏÑ±
   */
  async generateResponse({ keywords, videoCount, context = {} }) {
    try {
      // ClaudeÍ∞Ä ÏûàÏúºÎ©¥ Í≥†Í∏â ÏùëÎãµ ÏÉùÏÑ±
      if (this.claude) {
        const prompt = `
ÏÇ¨Ïö©ÏûêÍ∞Ä Îã§Ïùå ÌÇ§ÏõåÎìúÎ°ú ÏòÅÏÉÅÏùÑ Í≤ÄÏÉâÌñàÏäµÎãàÎã§: ${keywords.join(', ')}
Ï∞æÏùÄ ÏòÅÏÉÅ Ïàò: ${videoCount}Í∞ú

ÏûêÏó∞Ïä§ÎüΩÍ≥† ÏπúÍ∑ºÌïú ÌÜ§ÏúºÎ°ú ÏùëÎãµÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.

Í∑úÏπô:
1. ÏßßÍ≥† Í∞ÑÍ≤∞Ìïú ÏùëÎãµ (2-3Î¨∏Ïû•)
2. Ï∞æÏùÄ ÏòÅÏÉÅÏóê ÎåÄÌïú ÏÑ§Î™Ö
3. Îã§Ïùå Í≤ÄÏÉâ Ï†úÏïà Ìè¨Ìï®
4. Ïù¥Î™®ÏßÄ Ï†ÅÏ†àÌûà ÏÇ¨Ïö©

JSON ÌòïÏãù:
{
  "message": "ÏùëÎãµ Î©îÏãúÏßÄ",
  "suggestions": ["Îã§Ïùå Í≤ÄÏÉâ Ï†úÏïà1", "Ï†úÏïà2", "Ï†úÏïà3"]
}
`;

        const response = await this.claude.messages.create({
          model: 'claude-3-sonnet-20240229',
          max_tokens: 300,
          messages: [{ role: 'user', content: prompt }]
        });

        const result = JSON.parse(response.content[0].text);

        return {
          content: [{
            type: 'text',
            text: JSON.stringify({
              message: result.message,
              suggestions: result.suggestions,
              keywords: keywords,
              videoCount: videoCount,
              timestamp: new Date().toISOString()
            })
          }]
        };
      }

      // Ìè¥Î∞±: Í∞ÑÎã®Ìïú ÏùëÎãµ
      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            message: `${keywords.join(', ')}Î°ú ${videoCount}Í∞úÏùò ÏòÅÏÉÅÏùÑ Ï∞æÏïòÏñ¥Ïöî! üé¨`,
            suggestions: ['Îçî ÏõÉÍ∏¥ ÏòÅÏÉÅ', 'ÌûêÎßÅÎêòÎäî ÏòÅÏÉÅ', 'ÏµúÏã† Ìä∏Î†åÎìú'],
            keywords: keywords,
            videoCount: videoCount,
            note: 'Claude API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå'
          })
        }]
      };

    } catch (error) {
      return {
        content: [{
          type: 'text',
          text: JSON.stringify({
            message: `${keywords.join(', ')}Î°ú ${videoCount}Í∞úÏùò ÏòÅÏÉÅÏùÑ Ï∞æÏïòÏñ¥Ïöî! üé¨`,
            suggestions: ['Îçî ÏõÉÍ∏¥ ÏòÅÏÉÅ', 'ÌûêÎßÅÎêòÎäî ÏòÅÏÉÅ', 'ÏµúÏã† Ìä∏Î†åÎìú'],
            error: error.message
          })
        }]
      };
    }
  }

  // === Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§ ===

  /**
   * üîç Îπ†Î•∏ Ìå®ÌÑ¥ Îß§Ïπ≠ÏúºÎ°ú ÌÇ§ÏõåÎìú Ï∂îÏ∂ú
   */
  quickExtraction(message) {
    const patterns = {
      mood: {
        'ÌîºÍ≥§': ['ÌûêÎßÅÏòÅÏÉÅ', 'ASMR', 'Ìú¥Ïãù'],
        'Ïä§Ìä∏Î†àÏä§': ['ÏõÉÍ∏¥ÏòÅÏÉÅ', 'Í∑ÄÏó¨Ïö¥ÎèôÎ¨º', 'ÌûêÎßÅ'],
        'ÏßÄÎ£®': ['Ïû¨ÎØ∏ÏûàÎäîÏòÅÏÉÅ', 'Ïã†Í∏∞ÌïúÏòÅÏÉÅ', 'ÎÜÄÎùºÏö¥'],
        'Ïô∏Î°ú': ['Îî∞ÎúªÌïúÏòÅÏÉÅ', 'Í∞êÎèôÏòÅÏÉÅ', 'ÏúÑÎ°ú']
      },
      activity: {
        'Ìá¥Í∑º': ['Ìá¥Í∑ºÍ∏∏ÏòÅÏÉÅ', 'ÌïòÎ£®ÎßàÎ¨¥Î¶¨', 'Ìú¥Ïãù'],
        'Ï†êÏã¨': ['Ï†êÏã¨ÏãúÍ∞Ñ', 'ÏãùÏÇ¨ÏòÅÏÉÅ', 'ÏßßÏùÄÏòÅÏÉÅ'],
        'ÏÉàÎ≤Ω': ['ÏÉàÎ≤ΩÍ∞êÏÑ±', 'Ï°∞Ïö©ÌïúÏòÅÏÉÅ', 'Ïû†Íπê']
      },
      content: {
        'ÏõÉÍ∏¥': ['ÏõÉÍ∏¥ÏòÅÏÉÅ', 'ÏΩîÎØ∏Îîî', 'Ïú†Î®∏'],
        'ÌûêÎßÅ': ['ÌûêÎßÅÏòÅÏÉÅ', 'ÏûêÏó∞ÏòÅÏÉÅ', 'ASMR'],
        'ÎèôÎ¨º': ['Í∑ÄÏó¨Ïö¥ÎèôÎ¨º', 'Í∞ïÏïÑÏßÄ', 'Í≥†ÏñëÏù¥'],
        'ÏùåÏãù': ['Î®πÎ∞©', 'ÏöîÎ¶¨ÏòÅÏÉÅ', 'ÎßõÏßë']
      }
    };

    const keywords = [];
    const lowerMessage = message.toLowerCase();

    for (const [category, patternMap] of Object.entries(patterns)) {
      for (const [pattern, relatedKeywords] of Object.entries(patternMap)) {
        if (lowerMessage.includes(pattern)) {
          keywords.push(...relatedKeywords);
        }
      }
    }

    return [...new Set(keywords)].slice(0, 5);
  }

  /**
   * ‚è∞ ÏãúÍ∞Ñ Ïª®ÌÖçÏä§Ìä∏ Î∂ÑÏÑù
   */
  getTimeContext() {
    const now = new Date();
    const hour = now.getHours();
    const day = now.getDay();

    let timeOfDay;
    if (hour >= 6 && hour < 12) timeOfDay = 'morning';
    else if (hour >= 12 && hour < 18) timeOfDay = 'afternoon';
    else if (hour >= 18 && hour < 22) timeOfDay = 'evening';
    else timeOfDay = 'night';

    const isWeekend = day === 0 || day === 6;

    return {
      timeOfDay,
      hour,
      isWeekend,
      dayOfWeek: ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'][day]
    };
  }

  /**
   * üéØ ÏòÅÏÉÅ Ï§ëÎ≥µ Ï†úÍ±∞
   */
  deduplicateVideos(videos) {
    const seen = new Set();
    return videos.filter(video => {
      if (seen.has(video.videoId)) {
        return false;
      }
      seen.add(video.videoId);
      return true;
    });
  }

  /**
   * üîß ÌïÑÌÑ∞ Ï†ÅÏö©
   */
  applyFilters(videos, filters) {
    return videos.filter(video => {
      if (filters.minViews && video.viewCount < filters.minViews) return false;
      if (filters.maxDuration && video.duration > filters.maxDuration) return false;
      return true;
    });
  }

  /**
   * üìä Ìä∏Î†åÎìúÏóêÏÑú ÌÇ§ÏõåÎìú Ï∂îÏ∂ú
   */
  extractTrendKeywords(trendData) {
    if (!trendData?.videos) return [];
    
    const keywords = trendData.videos
      .map(video => video.title)
      .join(' ')
      .split(' ')
      .filter(word => word.length > 1)
      .slice(0, 10);

    return [...new Set(keywords)];
  }

  /**
   * üìù Î¶¨ÏÜåÏä§ ÏÑ§Ï†ï (Ï∂îÌõÑ ÌôïÏû•)
   */
  setupResources() {
    this.server.setRequestHandler('resources/list', async () => {
      return {
        resources: []
      };
    });
  }

  /**
   * üí≠ ÌîÑÎ°¨ÌîÑÌä∏ ÏÑ§Ï†ï (Ï∂îÌõÑ ÌôïÏû•)
   */
  setupPrompts() {
    this.server.setRequestHandler('prompts/list', async () => {
      return {
        prompts: []
      };
    });
  }

  /**
   * üöÄ MCP ÏÑúÎ≤Ñ ÏãúÏûë
   */
  async start() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    
    console.log('üåä Momentum YouTube Curator MCP Server started successfully!');
    console.log('üì° Ready to handle AI curation requests...');
  }
}

// ÏÑúÎ≤Ñ Ïã§Ìñâ
if (process.argv[1] === new URL(import.meta.url).pathname) {
  const server = new YouTubeCuratorMCP();
  server.start().catch(console.error);
}

export default YouTubeCuratorMCP; 