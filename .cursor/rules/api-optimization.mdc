---
description: 
globs: 
alwaysApply: true
---
---
rule_type: always_applied_workspace_rules
priority: critical
---

# YouTube API 최적화 가이드

## API 할당량 관리

### 일일 할당량
- **기본 할당량**: 10,000 units/day
- **목표 사용량**: < 8,000 units/day (20% 여유분)
- **캐시 적중률 목표**: 85% 이상

### API 작업별 비용 (정확한 계산)
| 작업 | 기본 비용 | part 추가 비용 | 예시 |
|------|----------|---------------|------|
| search.list | 100 units | - | 항상 100 units |
| videos.list | 1 unit | +2/part | part='snippet,contentDetails' = 5 units |
| channels.list | 1 unit | +2/part | part='snippet' = 3 units |

**중요**: videos.list는 기본 1 unit + 각 part당 2 units 추가

### 최신 할당량 분배 전략 (4개 카테고리)
```javascript
const quotaDistribution = {
  popular_keywords: {
    units: 2500,
    percentage: 25,
    description: '인기 키워드 캐싱 (7-30일 캐싱)',
    strategy: '상위 50개 키워드 사전 캐싱'
  },
  realtime_trends: {
    units: 2000,
    percentage: 20,
    description: '실시간 트렌드 키워드 (4시간 캐싱)',
    strategy: 'Bright Data MCP + YouTube 트렌드 혼합'
  },
  premium_users: {
    units: 3500,
    percentage: 35,
    description: '프리미엄 유저 실시간 검색',
    strategy: 'AI 대화형 검색 + 개인화'
  },
  emergency_reserve: {
    units: 2000,
    percentage: 20,
    description: '예비 할당량 (피크 시간, 캐시 미스)',
    strategy: '80% 사용 시 경고, 90% 시 캐시 전용 모드'
  }
};
```

## 2단계 필터링 워크플로우 (필수!)

### 재생 불가 문제 해결
```javascript
// ❌ 문제: search.list만으로는 재생 가능 여부를 알 수 없음
const searchOnly = await youtube.search.list({
  q: keyword,
  type: 'video',
  videoDuration: 'short'
});
// 결과에 embeddable, regionRestriction 정보 없음!

// ✅ 해결: 2단계 필터링 필수
async function getPlayableShorts(keyword) {
  // 1단계: 후보 검색 (100 units)
  const searchResults = await youtube.search.list({
    q: keyword,
    type: 'video',
    videoDuration: 'short',
    maxResults: 50,
    regionCode: 'KR',
    relevanceLanguage: 'ko'
  });
  
  // 2단계: 상세 정보 조회 (7 units for 50 videos)
  const videoIds = searchResults.items.map(item => item.id.videoId);
  const detailedVideos = await youtube.videos.list({
    part: 'snippet,contentDetails,status', // 1 + 2*3 = 7 units
    id: videoIds.join(','),
    hl: 'ko'
  });
  
  // 3단계: 재생 가능 영상만 필터링
  const playableVideos = detailedVideos.items.filter(video => {
    // 필수 체크 항목
    if (!video.status.embeddable) return false; // 임베드 불가
    if (video.status.privacyStatus !== 'public') return false; // 비공개
    
    // 지역 제한 확인
    const restrictions = video.contentDetails.regionRestriction;
    if (restrictions) {
      if (restrictions.blocked?.includes('KR')) return false;
      if (restrictions.allowed && !restrictions.allowed.includes('KR')) return false;
    }
    
    // Shorts 길이 확인 (60초 이하)
    const duration = parseDuration(video.contentDetails.duration);
    if (duration > 60) return false;
    
    return true;
  });
  
  // 총 비용: 107 units (search: 100 + videos: 7)
  console.log(`Found ${playableVideos.length}/${searchResults.items.length} playable videos`);
  return playableVideos;
}
```

### 배치 처리 최적화
```javascript
// 여러 요청을 효율적으로 처리
async function batchGetVideoDetails(videoIds) {
  const batches = [];
  const batchSize = 50; // YouTube API 최대 한도
  
  // ID를 50개씩 나누기
  for (let i = 0; i < videoIds.length; i += batchSize) {
    batches.push(videoIds.slice(i, i + batchSize));
  }
  
  // 병렬 처리
  const results = await Promise.all(
    batches.map(batch => 
      youtube.videos.list({
        part: 'snippet,contentDetails,status,statistics',
        id: batch.join(',')
      })
    )
  );
  
  return results.flatMap(r => r.data.items);
}
```

## 캐싱 전략 (재생 가능 영상 중심)

### 1. 차별화된 TTL 전략
```javascript
const CacheTTL = {
  PLAYABLE_VIDEO: 7 * 24 * 60 * 60,      // 7일 - 재생 가능 영상
  UNPLAYABLE_VIDEO: 24 * 60 * 60,        // 1일 - 재생 불가 영상
  SEARCH_RESULT: 4 * 60 * 60,            // 4시간 - 검색 결과
  TRENDING: 2 * 60 * 60,                 // 2시간 - 트렌딩
  USER_PREFERENCE: 30 * 24 * 60 * 60     // 30일 - 사용자 선호도
};

// 재생 불가 영상 캐싱으로 재확인 방지
async function cacheVideoPlayability(videoId, isPlayable, reason) {
  const ttl = isPlayable ? CacheTTL.PLAYABLE_VIDEO : CacheTTL.UNPLAYABLE_VIDEO;
  
  await cache.set(`video:${videoId}:playable`, {
    isPlayable,
    reason,
    checkedAt: new Date(),
    ttl
  }, ttl);
}
```

### 2. 스마트 캐시 워밍
```javascript
// 인기 키워드 사전 캐싱 (매일 새벽 3시)
async function warmPopularKeywordsCache() {
  const popularKeywords = [
    '먹방', '브이로그', '챌린지', 'ASMR', '운동',
    '요리', '여행', '댄스', '커버', '리뷰'
  ];
  
  for (const keyword of popularKeywords) {
    try {
      const results = await getPlayableShorts(keyword);
      await cache.set(
        `search:${keyword}`,
        results,
        CacheTTL.SEARCH_RESULT * 6 // 24시간 캐싱
      );
      
      // 개별 영상도 캐싱
      for (const video of results) {
        await cacheVideoPlayability(video.id, true, 'verified');
      }
    } catch (error) {
      console.error(`캐시 워밍 실패: ${keyword}`, error);
    }
  }
}
```

## 할당량 모니터링 및 제어

### 실시간 할당량 추적
```javascript
class QuotaManager {
  constructor() {
    this.used = 0;
    this.limit = 10000;
    this.distribution = quotaDistribution;
    this.categoryUsage = {
      popular_keywords: 0,
      realtime_trends: 0,
      premium_users: 0,
      emergency_reserve: 0
    };
  }
  
  async track(operation, units, category) {
    this.used += units;
    this.categoryUsage[category] += units;
    
    // 카테고리별 한도 확인
    if (this.categoryUsage[category] > this.distribution[category].units) {
      console.warn(`${category} 할당량 초과!`);
      // 긴급 예비 할당량 사용
      if (category !== 'emergency_reserve') {
        this.categoryUsage.emergency_reserve += units;
      }
    }
    
    // 전체 사용량 확인
    const usagePercent = (this.used / this.limit) * 100;
    
    if (usagePercent > 90) {
      // 캐시 전용 모드
      await this.enableCacheOnlyMode();
    } else if (usagePercent > 80) {
      // 경고 알림
      await this.sendWarning(usagePercent);
    }
    
    // DB에 기록
    await this.logUsage(operation, units, category, usagePercent);
  }
  
  async enableCacheOnlyMode() {
    console.error('API 할당량 90% 초과! 캐시 전용 모드 활성화');
    // 모든 새로운 API 호출 차단
    global.CACHE_ONLY_MODE = true;
  }
}
```

### 카테고리별 사용 전략
```javascript
// 1. 인기 키워드 (25% - 2500 units)
async function updatePopularKeywords() {
  const quota = quotaManager.getRemaining('popular_keywords');
  if (quota < 100) return; // 할당량 부족
  
  const keywords = await getTop50Keywords();
  for (const keyword of keywords) {
    if (!await cache.exists(`search:${keyword}`)) {
      await getPlayableShorts(keyword);
      await quotaManager.track('search+videos', 107, 'popular_keywords');
    }
  }
}

// 2. 실시간 트렌드 (20% - 2000 units)
async function updateRealtimeTrends() {
  const brightDataTrends = await brightDataMCP.getTrends();
  const youtubeTrends = await getYouTubeTrends(); // 캐시된 데이터 우선
  
  const mergedTrends = mergeTrends(brightDataTrends, youtubeTrends);
  await processTrends(mergedTrends);
}

// 3. 프리미엄 유저 (35% - 3500 units)
async function handlePremiumSearch(userId, query) {
  // AI 대화형 검색
  const context = await analyzeUserContext(userId, query);
  const keywords = await extractKeywords(context);
  
  // 캐시 우선 확인
  const cached = await findCachedResults(keywords);
  if (cached) return cached;
  
  // 새로운 검색
  const results = await getPlayableShorts(keywords.join(' '));
  await quotaManager.track('premium_search', 107, 'premium_users');
  
  return results;
}
```

## 에러 처리 및 폴백

### 단계별 폴백 전략
```javascript
async function searchWithFallback(query, userId) {
  try {
    // 1차: 정상 API 호출
    if (!global.CACHE_ONLY_MODE) {
      return await getPlayableShorts(query);
    }
  } catch (error) {
    console.error('API 호출 실패:', error);
  }
  
  // 2차: 정확한 캐시 매칭
  const exactCache = await cache.get(`search:${query}`);
  if (exactCache) {
    return { ...exactCache, fromCache: true };
  }
  
  // 3차: 유사 검색어 캐시
  const similarCache = await findSimilarCachedResults(query);
  if (similarCache) {
    return { ...similarCache, approximate: true };
  }
  
  // 4차: 전체 인기 영상
  const fallbackVideos = await cache.get('popular:daily');
  return {
    items: fallbackVideos || [],
    fallback: true,
    message: 'API 한도 초과로 인기 영상을 표시합니다.'
  };
}
```

## 최적화 체크리스트

### 개발 시
- [ ] 모든 검색에 2단계 필터링 적용
- [ ] 재생 가능 여부 확인 로직 구현
- [ ] 카테고리별 할당량 추적
- [ ] 캐시 우선 전략 적용

### 일일 운영
- [ ] API 사용량 확인 (< 8,000 units)
- [ ] 카테고리별 사용량 균형 확인
- [ ] 캐시 적중률 확인 (> 85%)
- [ ] 필터링 성공률 확인 (> 70%)

### 주간 최적화
- [ ] 인기 키워드 업데이트
- [ ] 재생 불가 영상 패턴 분석
- [ ] API 사용 효율성 개선
- [ ] 캐시 전략 조정

## 참조
- [YouTube Shorts 필터링 가이드](mdc:docs/development/youtube-shorts-filtering-guide.md)
- [YouTube API 파라미터](mdc:docs/development/youtube-api-parameters.md)
- [API 활용 전략](mdc:docs/basic/7.Youtube API 활용 전략.md)
