---
description: 
globs: 
alwaysApply: true
---
# 🚀 MVP 체크리스트 (7일 완성 목표)

## 📅 일별 개발 계획

### Day 1: 프로젝트 설정 및 기본 구조
#### 🎯 목표: 개발 환경 완전 구축
- [ ] **프로젝트 구조 생성**
  ```
  Youtube/
  ├── backend/           # Express.js 서버
  ├── frontend/          # Vanilla JS SPA
  ├── test-lab/          # 기능 테스트
  ├── shared/            # 공통 유틸리티
  └── docs/              # 문서
  ```
- [ ] **환경 설정**
  - [ ] Node.js/npm 설정
  - [ ] Supabase 프로젝트 생성
  - [ ] YouTube API 키 발급
  - [ ] Railway 계정 설정
- [ ] **기본 의존성 설치**
  - [ ] Express.js, CORS, helmet
  - [ ] Supabase JavaScript 클라이언트
  - [ ] 기본 보안 미들웨어

#### ✅ Day 1 완료 조건
- 서버가 localhost:3000에서 실행
- "Hello World" API 응답 확인
- Supabase 연결 테스트 성공

---

### Day 2: YouTube API 연동 및 검색 기능
#### 🎯 목표: 기본 영상 검색 완성
- [ ] **test-lab에서 YouTube API 테스트**
  - [ ] `test-lab/youtube-api/basic-search.js` 생성
  - [ ] API 키 동작 확인
  - [ ] 단일 검색 쿼리 테스트
- [ ] **2단계 필터링 구현** ⭐
  ```javascript
  // 1단계: search.list
  const searchResults = await youtube.search.list({
    q: keyword,
    type: 'video',
    videoDuration: 'short'
  });
  
  // 2단계: videos.list로 재생 가능 여부 확인
  const detailedVideos = await youtube.videos.list({
    part: 'snippet,contentDetails,status',
    id: videoIds.join(',')
  });
  ```
- [ ] **재생 가능 영상 필터링**
  - [ ] embeddable: true
  - [ ] privacyStatus: 'public'
  - [ ] 지역 차단 확인
  - [ ] 60초 이하 길이

#### ✅ Day 2 완료 조건
- test-lab에서 키워드 검색 성공
- 재생 가능한 Shorts만 필터링
- API 사용량 모니터링 확인

---

### Day 3: 백엔드 API 구현
#### 🎯 목표: REST API 완성
- [ ] **검색 API 엔드포인트**
  ```javascript
  GET /api/videos/search?q=키워드&limit=20
  POST /api/videos/search-advanced (필터 포함)
  ```
- [ ] **트렌드 API 구현**
  ```javascript
  GET /api/trends/keywords
  GET /api/trends/categories/{category}
  ```
- [ ] **기본 캐싱 구현**
  - [ ] 메모리 캐시 (Map 기반)
  - [ ] TTL 설정 (4시간)
  - [ ] 캐시 히트율 로깅
- [ ] **에러 처리 미들웨어**
  - [ ] API 할당량 초과 처리
  - [ ] 네트워크 오류 처리
  - [ ] 사용자 친화적 오류 메시지

#### ✅ Day 3 완료 조건
- Postman에서 모든 API 테스트 통과
- 캐시 적중률 > 70%
- 에러 응답 형식 통일

---

### Day 4: 사용자 인증 시스템
#### 🎯 목표: 로그인/회원가입 완성
- [ ] **Supabase Auth 설정**
  - [ ] 이메일/비밀번호 인증
  - [ ] Google OAuth (선택사항)
  - [ ] JWT 토큰 관리
- [ ] **인증 미들웨어**
  ```javascript
  // 토큰 검증
  app.use('/api/protected', authMiddleware.verifyToken);
  
  // 프리미엄 사용자 확인
  app.use('/api/premium', authMiddleware.requirePremium);
  ```
- [ ] **사용자 프로필 관리**
  - [ ] 프로필 조회/수정 API
  - [ ] 기본 설정 저장
  - [ ] 사용자 티어 관리

#### ✅ Day 4 완료 조건
- 회원가입/로그인 API 동작
- JWT 토큰 검증 성공
- 사용자별 데이터 격리 확인

---

### Day 5: 프론트엔드 SPA 구현
#### 🎯 목표: 기본 UI 완성
- [ ] **Vanilla JS SPA 구조**
  ```javascript
  // 컴포넌트 기반 구조 (Web Components 아님!)
  class VideoCard extends Component {
    render() { return `<div>...</div>`; }
  }
  
  // Hash 기반 라우팅
  const router = new Router({
    '/': HomePage,
    '/search': SearchPage,
    '/trending': TrendingPage
  });
  ```
- [ ] **기본 페이지 구현**
  - [ ] 홈페이지 (트렌드 키워드)
  - [ ] 검색 페이지 (무한 스크롤)
  - [ ] 로그인/회원가입 페이지
- [ ] **영상 카드 UI**
  - [ ] 썸네일, 제목, 채널명
  - [ ] 재생 시간, 조회수
  - [ ] YouTube 링크 연결

#### ✅ Day 5 완료 조건
- 모든 페이지 라우팅 동작
- 반응형 디자인 적용
- YouTube 영상 재생 확인

---

### Day 6: MCP 대화형 검색 (프리미엄 기능)
#### 🎯 목표: AI 대화 검색 구현
- [ ] **test-lab에서 Claude API 테스트**
  - [ ] `test-lab/mcp-chat/basic-chat.js`
  - [ ] 키워드 추출 테스트
  - [ ] 자연어 이해 검증
- [ ] **대화형 검색 API**
  ```javascript
  POST /api/chat/search
  {
    "message": "오늘 비 오는데 카페에서 보기 좋은 영상",
    "conversation_id": "uuid"
  }
  ```
- [ ] **WebSocket 실시간 통신**
  - [ ] 채팅 인터페이스
  - [ ] 타이핑 애니메이션
  - [ ] 검색 결과 스트리밍

#### ✅ Day 6 완료 조건
- 자연어 검색 질문 이해
- 적절한 키워드 추출
- 실시간 대화 인터페이스 동작

---

### Day 7: 최적화 및 배포 준비
#### 🎯 목표: 배포 가능한 상태 완성
- [ ] **성능 최적화**
  - [ ] API 응답 시간 < 500ms
  - [ ] 캐시 적중률 > 85%
  - [ ] 프론트엔드 번들 최적화
- [ ] **PWA 기능**
  - [ ] Service Worker 구현
  - [ ] 오프라인 캐시
  - [ ] 앱 매니페스트
- [ ] **Railway 배포**
  - [ ] 환경 변수 설정
  - [ ] 도메인 연결
  - [ ] HTTPS 적용
- [ ] **최종 테스트**
  - [ ] 전체 기능 통합 테스트
  - [ ] 모바일 브라우저 테스트
  - [ ] 성능 벤치마크

#### ✅ Day 7 완료 조건
- 라이브 URL에서 모든 기능 동작
- 모바일에서 PWA로 설치 가능
- 성능 지표 목표 달성

---

## 🎯 MVP 핵심 기능 체크리스트

### 필수 기능 (Must Have)
- [ ] **기본 키워드 검색** - 캐시된 인기 키워드
- [ ] **영상 리스트 표시** - 무한 스크롤
- [ ] **재생 가능 영상만** - 2단계 필터링
- [ ] **트렌드 키워드** - 실시간 업데이트
- [ ] **사용자 인증** - 회원가입/로그인
- [ ] **반응형 UI** - 모바일 최적화

### 프리미엄 기능 (Premium)
- [ ] **AI 대화형 검색** - 자연어 질문
- [ ] **고급 개인화** - 시청 패턴 분석
- [ ] **무제한 검색** - API 제한 해제
- [ ] **광고 제거** - 깔끔한 UI

### 향후 기능 (Future)
- [ ] 소셜 공유 기능
- [ ] 시청 시간 관리
- [ ] 오프라인 시청 목록
- [ ] 크리에이터 대시보드

---

## 🚨 중요 체크포인트

### API 할당량 관리
```javascript
// 매일 확인 필수
const quotaUsage = {
  total: 10000,      // 일일 총 할당량
  used: 3250,        // 현재 사용량
  remaining: 6750,   // 남은 할당량
  percentage: 32.5   // 사용률
};

// 80% 초과 시 경고
if (quotaUsage.percentage > 80) {
  console.warn('⚠️ API quota usage high!');
  enableCacheOnlyMode();
}
```

### 성능 기준
- **API 응답 시간**: < 500ms
- **페이지 로드 시간**: < 2초
- **캐시 적중률**: > 85%
- **필터링 성공률**: > 70%

### 보안 체크
- [ ] HTTPS 강제 적용
- [ ] JWT 토큰 만료 처리
- [ ] Rate Limiting 설정
- [ ] 입력값 검증 및 무결성

### 호환성 테스트
- [ ] Chrome (Android)
- [ ] Safari (iOS)
- [ ] Firefox (Desktop)
- [ ] Edge (Desktop)

---

## 📊 일일 진행 상황 추적

### Day 1: 환경 설정
```
[ ] 프로젝트 구조 생성      ⏱️ 2시간
[ ] 환경 변수 설정         ⏱️ 1시간
[ ] 기본 의존성 설치       ⏱️ 1시간
[ ] Hello World API       ⏱️ 30분
[ ] Supabase 연결 테스트   ⏱️ 30분
```

### Day 2: YouTube API
```
[ ] test-lab API 테스트    ⏱️ 2시간
[ ] 2단계 필터링 구현      ⏱️ 2시간
[ ] 재생 가능 여부 확인    ⏱️ 1시간
```

### Day 3: 백엔드 API
```
[ ] 검색 API 엔드포인트    ⏱️ 2시간
[ ] 트렌드 API 구현        ⏱️ 1시간
[ ] 기본 캐싱 시스템       ⏱️ 1.5시간
[ ] 에러 처리 미들웨어     ⏱️ 30분
```

### Day 4: 사용자 인증
```
[ ] Supabase Auth 설정     ⏱️ 1.5시간
[ ] 인증 미들웨어          ⏱️ 1시간
[ ] 프로필 관리 API        ⏱️ 1.5시간
```

### Day 5: 프론트엔드 UI
```
[ ] SPA 라우터 구현        ⏱️ 2시간
[ ] 기본 페이지 구현       ⏱️ 2시간
[ ] 영상 카드 UI           ⏱️ 1시간
```

### Day 6: MCP 대화 검색
```
[ ] Claude API 테스트      ⏱️ 1.5시간
[ ] 대화형 검색 API        ⏱️ 2시간
[ ] WebSocket 구현         ⏱️ 1.5시간
```

### Day 7: 최적화 & 배포
```
[ ] 성능 최적화            ⏱️ 2시간
[ ] PWA 구현               ⏱️ 1시간
[ ] Railway 배포           ⏱️ 1.5시간
[ ] 최종 테스트            ⏱️ 30분
```

---

## 🎉 MVP 완성 확인

### 기능 테스트 시나리오
1. **기본 검색**: "먹방" 검색 → 재생 가능한 Shorts 표시
2. **트렌드**: 홈페이지에서 인기 키워드 확인
3. **회원가입**: 이메일로 계정 생성
4. **프리미엄 검색**: "오늘 우울한데 기분 좋아지는 영상" 입력
5. **모바일**: 스마트폰에서 PWA로 설치

### 성공 지표
- ✅ 모든 핵심 기능 동작
- ✅ API 할당량 80% 이하 유지
- ✅ 성능 기준 충족
- ✅ 모바일 호환성 확인
- ✅ 배포 URL 접근 가능

### 다음 단계 준비
- [ ] Google Play Store 개발자 계정
- [ ] 앱 아이콘 및 스크린샷 준비
- [ ] 사용자 피드백 수집 계획
- [ ] 마케팅 전략 수립
