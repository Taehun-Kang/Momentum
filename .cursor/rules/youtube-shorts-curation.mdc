---
description: 
globs: 
alwaysApply: true
---
# YouTube Shorts AI 큐레이션 서비스 개발 가이드

## 프로젝트 개요
- **목적**: MCP(Model Context Protocol)를 활용한 AI 기반 YouTube Shorts 큐레이션 서비스
- **개발 기간**: 11일 (MVP 4일 + 고도화 5일 + 배포 2일)
- **배포 대상**: Android 앱스토어 우선, PWA 기반

## 프로젝트 구조
모노레포 구조를 사용합니다:
- [backend/](mdc:backend) - Express.js 백엔드 서버
- [frontend/](mdc:frontend) - Vanilla JS SPA 프론트엔드
- [shared/](mdc:shared) - 공통 유틸리티 및 타입 정의
- [test-lab/](mdc:test-lab) - 기능 테스트 및 프로토타입
- [docs/](mdc:docs) - 프로젝트 문서
  - [docs/basic/](mdc:docs/basic) - 상세 기획 문서
  - [docs/development/](mdc:docs/development) - 개발 가이드
  - [docs/summary/](mdc:docs/summary) - 요약 문서

## 기술 스택
### 백엔드
- **언어**: Node.js (JavaScript)
- **프레임워크**: Express.js
- **데이터베이스**: Supabase (PostgreSQL)
- **인증**: Supabase Auth
- **API 통합**: 
  - Claude API (MCP 연동)
  - YouTube Data API v3
  - Bright Data MCP (웹 검색)
  - Supabase MCP (DB 관리)

### 프론트엔드
- **언어**: Vanilla JavaScript (Component 클래스 기반)
- **아키텍처**: SPA (Single Page Application)
- **상태관리**: Store 패턴
- **라우팅**: Hash-based Router
- **스타일**: CSS Variables + 모듈화
- **빌드**: Webpack
- **PWA**: Service Worker + Manifest

**주의**: Web Components (HTMLElement 상속)가 아닌 단순 Component 클래스 패턴 사용

### 배포
- **플랫폼**: Railway (백엔드 + 프론트엔드)
- **앱스토어**: Google Play Store (Android)

## 핵심 개발 원칙

### 0. 점진적 개발 (Incremental Development) ⭐
- **작은 단위로 개발**: 한 번에 하나의 작은 기능만 구현
- **테스트 우선**: 모든 새 기능은 `test-lab/` 폴더에서 먼저 구현
- **검증 후 통합**: 테스트가 완료된 기능만 메인 코드베이스에 통합
- **문제 격리**: 각 기능을 독립적으로 개발하여 문제 발생 범위 최소화

### 1. YouTube 영상 재생 가능 여부 확인 (필수!) 🎬
```javascript
// ⭐ 2단계 필터링 워크플로우 필수 적용
async function searchPlayableShorts(keyword) {
  // 1단계: search.list로 후보 검색
  const searchResults = await youtube.search.list({
    q: keyword,
    type: 'video',
    videoDuration: 'short', // 4분 미만
    maxResults: 50
  });
  
  // 2단계: videos.list로 재생 가능 여부 확인 (필수!)
  const videoIds = searchResults.items.map(item => item.id.videoId);
  const detailedVideos = await youtube.videos.list({
    part: 'snippet,contentDetails,status,statistics',
    id: videoIds.join(',')
  });
  
  // 3단계: 재생 가능한 영상만 필터링
  return detailedVideos.items.filter(video => {
    return video.status.embeddable && // 임베드 가능
           video.status.privacyStatus === 'public' && // 공개 영상
           !isRegionBlocked(video, 'KR') && // 한국 차단 아님
           getDuration(video) <= 60; // 60초 이하
  });
}
```

### 2. API 할당량 최적화 (일일 10,000 units)
```javascript
// 최신 할당량 분배 (4개 카테고리)
const quotaDistribution = {
  popular_keywords: 2500,    // 25% - 인기 키워드 캐싱
  realtime_trends: 2000,     // 20% - 실시간 트렌드
  premium_users: 3500,       // 35% - 프리미엄 유저
  emergency_reserve: 2000    // 20% - 예비 할당량
};

// API 비용 계산
const apiCosts = {
  searchList: 100,                    // search.list
  videosList: 1 + (parts.length * 2)  // videos.list
  // 예: part='snippet,contentDetails,status' = 7 units
};
```

### 3. MCP 활용
```javascript
// MCP 서버 연동
const brightDataMCP = new MCPClient('bright-data');
const supabaseMCP = new MCPClient('supabase');

// 자연어 대화형 검색 (핵심 기능)
async function chatSearch(userMessage) {
  const context = await mcp.analyzeContext(userMessage);
  const keywords = await mcp.extractKeywords(context);
  return await searchWithKeywords(keywords);
}
```

### 4. 캐싱 전략
- 재생 가능 영상: 7일 캐싱
- 재생 불가 영상: 1일 캐싱 (재확인 방지)
- 검색 결과: 4시간 캐싱
- 캐시 적중률 목표: 85% 이상

### 5. 프론트엔드 아키텍처
```javascript
// Component 기반 구조 (Web Components 아님!)
class VideoCard extends Component {
  constructor(props) {
    super(props);
    this.state = { liked: false };
  }
  
  render() {
    return `<div class="video-card">...</div>`;
  }
}

// Store 패턴으로 상태 관리
class VideoStore extends Store {
  constructor() {
    super();
    this.videos = [];
  }
}

// Hash 기반 라우팅
const router = new Router({
  '/': HomePage,
  '/search': SearchPage,
  '/trending': TrendingPage
});
```

## 개발 워크플로우

### 새 기능 개발 시
1. `test-lab/feature-name/` 폴더 생성
2. 최소 기능 구현 및 독립 테스트
3. 동작 확인 후 메인 코드에 통합
4. 문서 업데이트 및 커밋

### 코드 리뷰 체크리스트
- [ ] 2단계 필터링 적용 (search → videos)
- [ ] 재생 가능 여부 확인
- [ ] API 할당량 고려
- [ ] 캐싱 전략 적용
- [ ] 에러 처리 구현

## 주요 참조 문서
- [Vanilla SPA 아키텍처](mdc:docs/development/vanilla-spa-architecture.md)
- [YouTube API 파라미터](mdc:docs/development/youtube-api-parameters.md)
- [재생 가능 영상 필터링](mdc:docs/development/youtube-shorts-filtering-guide.md)
- [API 최적화 전략](mdc:docs/basic/7.Youtube API 활용 전략.md)
- [MCP 구현 가이드](mdc:docs/basic/3.MCP 구현.md)

## 모니터링 지표
- 필터링 성공률: > 70%
- 캐시 히트율: > 85%
- API 사용률: < 80%
- 응답 시간: < 0.5초

