/**
 * ‚è∞ TimeBasedKeywords - ÏãúÍ∞ÑÎåÄÎ≥Ñ ÌÇ§ÏõåÎìú Ïª¥Ìè¨ÎÑåÌä∏
 */

import { Component } from '../../../core/Component.js'
import './TimeBasedKeywords.css'

export default class TimeBasedKeywords extends Component {
  static defaultProps = {
    maxKeywords: 4,
    onKeywordClick: () => {},
    autoUpdate: true,
    updateInterval: 60000, // 1Î∂ÑÎßàÎã§ ÏãúÍ∞Ñ Ï≤¥ÌÅ¨
    whiteTheme: false
  }

  constructor(props = {}) {
    super({
      ...TimeBasedKeywords.defaultProps,
      ...props,
      tagName: 'div',
      autoRender: false
    })

    this.currentTime = new Date()
    this.updateTimer = null
    this.isDestroyed = false

    this.render()

    // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ§Ï†ï
    if (this.props.autoUpdate) {
      this.startAutoUpdate()
    }
  }

  render() {
    this.el.className = `time-based-keywords${this.props.whiteTheme ? ' white-theme' : ''}`

    const timeContent = this.getTimeBasedContent()
    
    // ÏãúÍ∞ÑÎåÄÎ≥Ñ data attribute Ï∂îÍ∞Ä
    const hour = this.currentTime.getHours()
    let timeSlot = 'night'
    if (hour >= 6 && hour < 12) timeSlot = 'morning'
    else if (hour >= 12 && hour < 18) timeSlot = 'afternoon'
    else if (hour >= 18 && hour < 22) timeSlot = 'evening'
    
    this.el.dataset.timeSlot = timeSlot

    this.el.innerHTML = /* html */ `
      <div class="time-header">
        <div class="section-title">${timeContent.timeSlot}</div>
      </div>
      <div class="time-keywords-vertical" id="time-keywords"></div>
    `

    this.populateKeywords()
    this.bindEvents()

    return this
  }

  getTimeBasedContent() {
    const hour = this.currentTime.getHours()
    const day = this.currentTime.getDay() // 0: ÏùºÏöîÏùº, 1: ÏõîÏöîÏùº, ...
    const dayNames = ['ÏùºÏöîÏùº', 'ÏõîÏöîÏùº', 'ÌôîÏöîÏùº', 'ÏàòÏöîÏùº', 'Î™©ÏöîÏùº', 'Í∏àÏöîÏùº', 'ÌÜ†ÏöîÏùº']
    const currentDay = dayNames[day]
    
    if (hour >= 6 && hour < 12) {
      return {
        greeting: 'Ï¢ãÏùÄ ÏïÑÏπ®Ïù¥ÏóêÏöî! üëã',
        timeSlot: `${currentDay} ÏïÑÏπ®`,
        description: 'ÌïòÎ£®Î•º ÏãúÏûëÌïòÎäî ÏÇ¨ÎûåÎì§Ïù¥ ÎßéÏù¥ Î≥¥Îäî ÏòÅÏÉÅ',
        icon: 'üåÖ'
      }
    } else if (hour >= 12 && hour < 18) {
      return {
        greeting: 'Ï¢ãÏùÄ Ïò§ÌõÑÏóêÏöî! üëã',
        timeSlot: `${currentDay} Ï†êÏã¨ÏãúÍ∞Ñ`,
        description: 'Ïû†ÍπêÏùò Ìú¥ÏãùÏãúÍ∞ÑÏóê Î≥¥Í∏∞ Ï¢ãÏùÄ ÏòÅÏÉÅ',
        icon: '‚òÄÔ∏è'
      }
    } else if (hour >= 18 && hour < 22) {
      return {
        greeting: 'Ìé∏ÏïàÌïú Ï†ÄÎÖÅÏù¥ÏóêÏöî! üëã',
        timeSlot: `${currentDay} Ï†ÄÎÖÅ`,
        description: 'ÌïòÎ£®Î•º ÎßàÎ¨¥Î¶¨ÌïòÎ©∞ Î≥¥Îäî ÏòÅÏÉÅ',
        icon: 'üåÜ'
      }
    } else {
      return {
        greeting: 'ÍπäÏùÄ Î∞§Ïù¥ÎÑ§Ïöî! üëã',
        timeSlot: `${currentDay} Î∞§`,
        description: 'Ïû†Îì§Í∏∞ Ï†Ñ ÎßàÏùåÏùÑ Îã¨ÎûòÎäî ÏòÅÏÉÅ',
        icon: 'üåô'
      }
    }
  }

  getTimeBasedKeywords() {
    const hour = this.currentTime.getHours()
    
    if (hour >= 6 && hour < 12) { // ÏïÑÏπ®
      return ['Î™®Îãù Î£®Ìã¥', 'Ï∂úÍ∑º Ï§ÄÎπÑ', 'ÏïÑÏπ® Ïö¥Îèô', 'Í∞ÑÎã® ÏïÑÏπ®ÏãùÏÇ¨', 'Ï∂úÍ∑ºÍ∏∏ ÏùåÏïÖ', 'ÌïòÎ£® Í≥ÑÌöç']
    } else if (hour >= 12 && hour < 18) { // Ïò§ÌõÑ
      return ['Ï†êÏã¨ Î∏åÏù¥Î°úÍ∑∏', 'ÏßÅÏû•Ïù∏ ÏùºÏÉÅ', 'Ïò§ÌõÑ Ìú¥Ïãù', 'Ïπ¥Ìéò ÏùåÏïÖ', 'Í∞ÑÎã® ÏöîÎ¶¨', 'ÏóÖÎ¨¥ ÌåÅ']
    } else if (hour >= 18 && hour < 22) { // Ï†ÄÎÖÅ
      return ['Ìá¥Í∑º Î£®Ìã¥', 'ÏßëÎ∞• Î†àÏãúÌîº', 'Ï†ÄÎÖÅ Ïö¥Îèô', 'ÌûêÎßÅ ÏùåÏïÖ', 'Ï∑®ÎØ∏ ÏãúÍ∞Ñ', 'ÏùºÏÉÅ Î∏åÏù¥Î°úÍ∑∏']
    } else { // Î∞§
      return ['ÏàòÎ©¥ ÏùåÏïÖ', 'Î∞§ Î∏åÏù¥Î°úÍ∑∏', 'ÎèÖÏÑú ASMR', 'Î™ÖÏÉÅ ÏòÅÏÉÅ', 'Ï°∞Ïö©Ìïú ÌûêÎßÅ', 'Ïû†ÏûêÎ¶¨ Î£®Ìã¥']
    }
  }

  populateKeywords() {
    const container = this.el.querySelector('#time-keywords')
    if (!container) return

    // Í∏∞Ï°¥ ÌÇ§ÏõåÎìú Ï†úÍ±∞
    container.innerHTML = ''

    const keywords = this.getTimeBasedKeywords().slice(0, this.props.maxKeywords)
    const timeContent = this.getTimeBasedContent()
    
    // Ïª®ÌÖåÏù¥ÎÑà Ï¥àÍ∏∞ ÏÑ§Ï†ï (ÏûêÏó∞Ïä§Îü¨Ïö¥ ÎÜíÏù¥ Ï¶ùÍ∞ÄÎ•º ÏúÑÌï¥)
    container.style.height = 'auto'
    container.style.overflow = 'visible'
    container.style.opacity = '1'
    container.style.transform = 'translateY(0) scale(1)'
    container.style.transition = 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)'

    // ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ Ï≤òÎ¶¨
    if (keywords.length === 0) {
      return
    }

    // Î™®Îì† ÌÇ§ÏõåÎìúÎ•º ÎØ∏Î¶¨ ÏÉùÏÑ± (ÏõêÎûò ÌÅ¨Í∏∞Î°ú ÏãúÏûë, Ìà¨Î™ÖÌïòÍ≤å)
    keywords.forEach((keyword, index) => {
      const keywordBtn = document.createElement('button')
      keywordBtn.className = 'time-vertical-btn'
      keywordBtn.dataset.index = index
      keywordBtn.dataset.keyword = keyword

      keywordBtn.innerHTML = /* html */ `
        <div class="time-icon">${timeContent.icon}</div>
        <div class="time-text">${keyword}</div>
      `

      // Î∞òÏùëÌòï ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
      const getResponsiveHeight = () => {
        const width = window.innerWidth
        if (width <= 375) return '46px'
        else if (width <= 430) return '50px'
        else return '56px'
      }

      const getResponsivePadding = () => {
        const width = window.innerWidth
        if (width <= 375) return '12px 14px'
        else if (width <= 430) return '14px 16px'
        else return '16px 20px'
      }

      // Ï¥àÍ∏∞ ÏÉÅÌÉú: ÏõêÎûò ÌÅ¨Í∏∞, Ìà¨Î™Ö
      keywordBtn.style.height = getResponsiveHeight()
      keywordBtn.style.minHeight = getResponsiveHeight()
      keywordBtn.style.padding = getResponsivePadding()
      keywordBtn.style.opacity = '0'
      keywordBtn.style.transform = 'translateX(20px) scale(0.95)'
      keywordBtn.style.transition = 'opacity 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)'

      // ÎØ∏Î¶¨ DOMÏóê Ï∂îÍ∞Ä
      container.appendChild(keywordBtn)
    })

    // ÌÇ§ÏõåÎìúÎì§ÏùÑ ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÎÇòÌÉÄÎÇ¥Í∏∞ (ÎåÄÍ∏∞ ÏóÜÏù¥ Î∞îÎ°ú ÏãúÏûë)
    keywords.forEach((keyword, index) => {
      setTimeout(() => {
        if (this.isDestroyed) return
        
        const keywordBtn = container.children[index]
        if (keywordBtn) {
          // ÏûêÏó∞Ïä§ÎüΩÍ≤å ÎÇòÌÉÄÎÇ¥Í∏∞ (ÌÅ¨Í∏∞Îäî Ïù¥ÎØ∏ ÏÑ§Ï†ïÎê®)
          keywordBtn.style.opacity = '1'
          keywordBtn.style.transform = 'translateX(0) scale(1)'
        }
      }, index * 250) // 250ms Í∞ÑÍ≤©ÏúºÎ°ú ÏàúÏ∞® ÎÇòÌÉÄÎÇ¥Í∏∞
    })
  }

  bindEvents() {
    this.el.addEventListener('click', (e) => {
      const keywordBtn = e.target.closest('.time-vertical-btn')
      if (!keywordBtn) return

      const index = parseInt(keywordBtn.dataset.index)
      const keyword = keywordBtn.dataset.keyword
      const timeContent = this.getTimeBasedContent()

      // ÌÅ¥Î¶≠ ÌîºÎìúÎ∞± Ïï†ÎãàÎ©îÏù¥ÏÖò
      keywordBtn.style.transform = 'translateX(8px) scale(0.98)'
      setTimeout(() => {
        keywordBtn.style.transform = ''
      }, 150)

      // ÏΩúÎ∞± Ïã§Ìñâ
      this.props.onKeywordClick({
        keyword,
        timeSlot: timeContent.timeSlot,
        icon: timeContent.icon,
        index
      })
    })
  }



  startAutoUpdate() {
    if (this.updateTimer) {
      clearInterval(this.updateTimer)
    }

    this.updateTimer = setInterval(() => {
      if (this.isDestroyed) return

      const newTime = new Date()
      const oldHour = this.currentTime.getHours()
      const newHour = newTime.getHours()

      // ÏãúÍ∞ÑÎåÄÍ∞Ä Î∞îÎÄåÏóàÎäîÏßÄ ÌôïÏù∏
      const oldTimeSlot = this.getTimeSlotByHour(oldHour)
      const newTimeSlot = this.getTimeSlotByHour(newHour)

      if (oldTimeSlot !== newTimeSlot) {
        this.currentTime = newTime
        this.updateDisplay()
      }
    }, this.props.updateInterval)
  }

  stopAutoUpdate() {
    if (this.updateTimer) {
      clearInterval(this.updateTimer)
      this.updateTimer = null
    }
  }

  getTimeSlotByHour(hour) {
    if (hour >= 6 && hour < 12) return 'morning'
    if (hour >= 12 && hour < 18) return 'afternoon'
    if (hour >= 18 && hour < 22) return 'evening'
    return 'night'
  }

  updateDisplay() {
    // Ìó§Îçî ÏóÖÎç∞Ïù¥Ìä∏
    const timeContent = this.getTimeBasedContent()
    const sectionTitle = this.el.querySelector('.section-title')
    if (sectionTitle) {
      sectionTitle.textContent = timeContent.timeSlot
    }

    // ÏãúÍ∞ÑÎåÄÎ≥Ñ data attribute ÏóÖÎç∞Ïù¥Ìä∏
    const hour = this.currentTime.getHours()
    let timeSlot = 'night'
    if (hour >= 6 && hour < 12) timeSlot = 'morning'
    else if (hour >= 12 && hour < 18) timeSlot = 'afternoon'
    else if (hour >= 18 && hour < 22) timeSlot = 'evening'
    
    this.el.dataset.timeSlot = timeSlot

    // Ïª®ÌÖåÏù¥ÎÑà Ïû¨ÏãúÏûë Ïï†ÎãàÎ©îÏù¥ÏÖò
    this.el.style.animation = 'none'
    setTimeout(() => {
      this.el.style.animation = 'containerFadeIn 0.6s ease-out forwards'
    }, 10)

    // ÌÇ§ÏõåÎìú Îã§Ïãú ÏÉùÏÑ±
    this.populateKeywords()
  }

  updateTime(newTime) {
    this.currentTime = new Date(newTime)
    this.updateDisplay()
  }

  setMaxKeywords(count) {
    this.props.maxKeywords = Math.max(1, Math.min(6, count))
    this.populateKeywords()
  }

  getCurrentTimeSlot() {
    return this.getTimeBasedContent()
  }

  getKeywords() {
    return this.getTimeBasedKeywords()
  }

  destroy() {
    this.isDestroyed = true
    this.stopAutoUpdate()
    super.destroy?.()
  }
} 